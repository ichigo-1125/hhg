/*

    List

    ----------------------------------------------------------------------------

    # 目次

    - List

    - コンストラクタ
    - 状態の取得
    - 要素の追加・削除

    - トレイトの実装

    - macro

*/

#![doc = include_str!("../../doc/collections/list/list.md")]

use std::collections::LinkedList;
use std::ops::{ Deref, DerefMut };


//------------------------------------------------------------------------------
//  List
//------------------------------------------------------------------------------
#[derive(Debug)]
pub struct List<T>
{
    pub list: LinkedList<T>,
}


//------------------------------------------------------------------------------
//  コンストラクタ
//------------------------------------------------------------------------------
impl<T> List<T>
{
    //--------------------------------------------------------------------------
    //  new
    //
    //  空のListを生成する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/new.md")]
    #[inline]
    #[must_use]
    pub fn new() -> Self
    {
        Self { list: LinkedList::new() }
    }
}


//------------------------------------------------------------------------------
//  状態の取得
//------------------------------------------------------------------------------
impl<T> List<T>
{
    //--------------------------------------------------------------------------
    //  len
    //
    //  要素数を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/len.md")]
    #[inline]
    pub fn len( &self ) -> usize
    {
        self.list.len()
    }

    //--------------------------------------------------------------------------
    //  is_empty
    //
    //  Listが空であるか確認する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/is_empty.md")]
    #[inline]
    pub fn is_empty( &self ) -> bool
    {
        self.list.is_empty()
    }
}

impl<T: PartialEq> List<T>
{
    //--------------------------------------------------------------------------
    //  contains
    //
    //  要素が存在するかを確認する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/contains.md")]
    #[inline]
    pub fn contains( &self, x: &T ) -> bool
    {
        self.list.contains(x)
    }
}


//------------------------------------------------------------------------------
//  要素へのアクセス
//------------------------------------------------------------------------------
impl<T> List<T>
{
    //--------------------------------------------------------------------------
    //  front
    //
    //  先頭の要素の参照を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/front.md")]
    #[inline]
    pub fn front( &self ) -> Option<&T>
    {
        self.list.front()
    }

    //--------------------------------------------------------------------------
    //  front_mut
    //
    //  先頭の要素の可変参照を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/front_mut.md")]
    #[inline]
    pub fn front_mut( &mut self ) -> Option<&mut T>
    {
        self.list.front_mut()
    }

    //--------------------------------------------------------------------------
    //  back
    //
    //  末尾の要素の参照を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/back.md")]
    #[inline]
    pub fn back( &self ) -> Option<&T>
    {
        self.list.back()
    }

    //--------------------------------------------------------------------------
    //  back_mut
    //
    //  末尾の要素の可変参照を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/back_mut.md")]
    #[inline]
    pub fn back_mut( &mut self ) -> Option<&mut T>
    {
        self.list.back_mut()
    }
}


//------------------------------------------------------------------------------
//  Listの伸縮
//------------------------------------------------------------------------------
impl<T> List<T>
{
    //--------------------------------------------------------------------------
    //  push_front
    //
    //  先頭に要素を追加する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/push_front.md")]
    #[inline]
    pub fn push_front( &mut self, value: T )
    {
        self.list.push_front(value);
    }

    //--------------------------------------------------------------------------
    //  push_back
    //
    //  末尾に要素を追加する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/push_back.md")]
    #[inline]
    pub fn push_back( &mut self, value: T )
    {
        self.list.push_back(value);
    }

    //--------------------------------------------------------------------------
    //  pop_front
    //
    //  先頭の要素を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/pop_front.md")]
    #[inline]
    pub fn pop_front( &mut self ) -> Option<T>
    {
        self.list.pop_front()
    }

    //--------------------------------------------------------------------------
    //  pop_back
    //
    //  末尾の要素を取得する。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/pop_back.md")]
    #[inline]
    pub fn pop_back( &mut self ) -> Option<T>
    {
        self.list.pop_back()
    }

    //--------------------------------------------------------------------------
    //  clear
    //
    //  全ての要素を削除する（ただし容量は変わらない）。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/clear.md")]
    #[inline]
    pub fn clear( &mut self )
    {
        self.list.clear();
    }

    //--------------------------------------------------------------------------
    //  split_off
    //
    //  指定したインデックスでListを分割し、末尾のListを返す。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/split_off.md")]
    #[inline]
    pub fn split_off( &mut self, at: usize ) -> List<T>
    {
        List { list: self.list.split_off(at) }
    }

    //--------------------------------------------------------------------------
    //  append
    //
    //  別のListを末尾に移動する。otherは空になる。
    //--------------------------------------------------------------------------
    #[doc = include_str!("../../doc/collections/list/append.md")]
    #[inline]
    pub fn append( &mut self, other: &mut List<T> )
    {
        self.list.append(other)
    }
}


//------------------------------------------------------------------------------
//  トレイトの実装
//------------------------------------------------------------------------------

impl<T> Deref for List<T>
{
    type Target = LinkedList<T>;

    //--------------------------------------------------------------------------
    //  deref
    //--------------------------------------------------------------------------
    #[inline]
    fn deref( &self ) -> &LinkedList<T>
    {
        &self.list
    }
}

impl<T> DerefMut for List<T>
{
    //--------------------------------------------------------------------------
    //  deref_mut
    //--------------------------------------------------------------------------
    #[inline]
    fn deref_mut( &mut self ) -> &mut LinkedList<T>
    {
        &mut self.list
    }
}

impl<T, U> PartialEq<U> for List<T>
    where
        LinkedList<T>: PartialEq<U>,
{
    //--------------------------------------------------------------------------
    //  eq
    //--------------------------------------------------------------------------
    #[inline]
    fn eq( &self, other: &U ) -> bool
    {
        self.list.eq(other)
    }
}

impl<T> PartialEq<List<T>> for LinkedList<T>
    where
        T: PartialEq,
{
    //--------------------------------------------------------------------------
    //  eq
    //--------------------------------------------------------------------------
    #[inline]
    fn eq( &self, other: &List<T> ) -> bool
    {
        LinkedList::eq(self, &other.list)
    }
}


//------------------------------------------------------------------------------
//  macro
//------------------------------------------------------------------------------
#[macro_export]
macro_rules! list
{
    () =>
    {
        List { list: ::std::collections::LinkedList::new() }
    };

    ( $elem: expr; $n: expr ) =>
    {
        {
            let mut list = ::std::collections::LinkedList::new();
            (0..$n).for_each(|_| list.push_back($elem));
            List { list }
        }
    };

    ( $( $elem: expr ),+ $(,)? ) =>
    {
        {
            let mut list = ::std::collections::LinkedList::new();
            $(
                list.push_back($elem);
            )*
            List { list }
        }
    };
}
